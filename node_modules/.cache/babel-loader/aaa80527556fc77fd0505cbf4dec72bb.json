{"ast":null,"code":"var _jsxFileName = \"D:\\\\workshop\\\\imc\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport './app.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /* estados (ou useState) é algo mutável, ou seja, pode trocar de valor conforme a minha aplicação sem que eu tenha que recarregar a página. Então ele salva esses valores como se fosse uma variável para mim ter acesso depois */\n  const [peso, setPeso] = useState('');\n  const [altura, setAltura] = useState('');\n\n  function calcularIMC() {\n    const alt = altura / 100;\n    const imc = peso / (alt * alt);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Calculadora IMC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Vamos calcular seu imc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"area-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Peso em (kg) Ex: 70\",\n        value: peso,\n        onChange: e => setPeso(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Altura em (cm) Ex: 176\",\n        value: altura,\n        onChange: e => setAltura(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: calcularIMC,\n        children: \"Calcular\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Seu imc foi 25, voc\\xEA est\\xE1 abaixo do peso!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qj0iK5Ork3JsTGAAUgRRawJuST0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/workshop/imc/src/App.js"],"names":["useState","App","peso","setPeso","altura","setAltura","calcularIMC","alt","imc","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;;AAEA,eAAe,SAASC,GAAT,GAAc;AAAA;;AAE3B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;;AAGA,WAASM,WAAT,GAAsB;AACpB,UAAMC,GAAG,GAAGH,MAAM,GAAG,GAArB;AACA,UAAMI,GAAG,GAAGN,IAAI,IAAIK,GAAG,GAAGA,GAAV,CAAhB;AACD;;AAGD,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,qBAFd;AAGE,QAAA,KAAK,EAAEL,IAHT;AAIE,QAAA,QAAQ,EAAGO,CAAD,IAAON,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ1B;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,wBAFd;AAGE,QAAA,KAAK,EAAEP,MAHT;AAIE,QAAA,QAAQ,EAAGK,CAAD,IAAOJ,SAAS,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA,cAPF,eAcE;AAAQ,QAAA,OAAO,EAAEL,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GAxCuBL,G;;KAAAA,G","sourcesContent":["import { useState } from 'react'\nimport './app.css'\n\nexport default function App(){\n\n  /* estados (ou useState) é algo mutável, ou seja, pode trocar de valor conforme a minha aplicação sem que eu tenha que recarregar a página. Então ele salva esses valores como se fosse uma variável para mim ter acesso depois */\n  const [peso, setPeso] = useState('');\n  const [altura, setAltura] = useState('');\n\n\n  function calcularIMC(){\n    const alt = altura / 100;\n    const imc = peso / (alt * alt)\n  }\n\n\n  return(\n    <div className=\"app\">\n      <h1>Calculadora IMC</h1>\n      <span>Vamos calcular seu imc</span>\n\n      <div className=\"area-input\">\n        <input \n          type=\"text\" \n          placeholder=\"Peso em (kg) Ex: 70\"\n          value={peso}\n          onChange={(e) => setPeso(e.target.value)}\n        />\n        <input \n          type=\"text\" \n          placeholder=\"Altura em (cm) Ex: 176\"\n          value={altura}\n          onChange={(e) => setAltura(e.target.value)}\n        />\n\n        <button onClick={calcularIMC}>\n          Calcular\n        </button>\n      </div>\n\n      <h2>Seu imc foi 25, você está abaixo do peso!</h2>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}